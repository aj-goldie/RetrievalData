Hey, what's going on everybody? It's your bro. Hope you're doing well. And in this video, I'm going to teach you guys about interfaces in Java. So sit back, relax and enjoy the show. Make sure you like comment and subscribe one like equals one prayer for the YouTube algorithm. Well, let's talk about interfaces. Think of interfaces as a template that can be applied to a class. It's similar to inheritance, but it specifies what a class has or must do. Classes can apply more than one interface. So that's a key thing to take away from this, whereas an inheritance is limited to just one direct superclass. Here's an example. I have three additional classes. I have a class called Rabbit, a class called Hawk and a class called Fish. We're going to be creating some interfaces, two for this example, one called Prey and another called Predator. And we're going to have some of these classes implement these interfaces depending on what the animal is. So this is how to create an interface. Go to file new interface and let's call the first one Prey and click finish. All right, so we have an interface called Prey public interface Prey. Let's create another interface, file new interface. This will be predator. Okay, so we have two interfaces, prey and Predator. With interfaces you can declare variables normally like you can do with inheritance. You can also declare some methods. And you do not need to create a body for these methods. So when a class is implementing one of these interfaces, they need to implement and define what this method is going to do. So let's begin with prey. Let's write just one method. So what's a method that Prey will do? Well, prey flee from predators. So let's create a method called flee. This will be Void Flee and that's it. We do not need a body. So void flea. That's it. There is no body to this. And let's say that our rabbit is going to use this interface. Now, to implement an interface, when you define the class, just type implements then the name of the interface we would like to implement the Prey interface implements Prey. So one thing with interfaces, if you declare a method, it works like an abstract method. We need to define what this method is going to do. So within the Rabbit class, we need to add any unimplemented methods. So we're basically overriding this Flea method. So what do we want our rabbit to do when we call the Flea method? So maybe just a simple system out print line that states the rabbit is fleeing. And let's test this. Let's create a rabbit object rabbit. Rabbit equals new rabbit. And let's see if we can call that method Rabbit Flee. There it is. The rabbit is fleeing. Now let's apply the Predator template well, interface to the Hawk class. Because hawks are predators, they are very rarely Prey. Well, I could be wrong. All right, so public class hawk implements predator and we should probably create a method within predator for this example. So if an animal is a predator, they should have the ability to hunt. So let's create a method called Hunt void Hunt and we do not need to declare a body. So within our hawk class, we need to add any unimplemented methods and define what this does within this implementation. So let's say if the hawk object is going to use the hunt method, we will display the hawk is hunting and let's create a hawk object this time. So hawk hawk equals new hawk hawk hunt the hawk is hunting. Now, since we're implementing the predator interface, there is going to be no flea method for hawks because we're not using the Prey interface, we're using the predator interface. So just to prove that, we'll attempt to use hawk flea and it doesn't appear that there's a method for that yes, method flea is undefined for the type hawk. All right, now we can apply more than one interface to a class. So with fish, fish can be both prey and predators depending on their size. Bigger fish tend to eat smaller fish. So let's add two templates, two interfaces to our class fish and this is how to do that implements prey, comma predators. So we're applying both of these templates, these interfaces to our class fish. So we're implementing prey and predator but we need to add any unimplemented methods and we have two this time, one hunt from the predator interface and another flea from the Prey interface. So let's define these so system out print line within Hunt, we'll just state that this fish is hunting smaller fish and with the flee method system out printline, let's say this fish is fleeing from a larger fish and let's try this. So let's create a fish object fish fish equals new fish fish Hunt so our fish has a hunt method. The fish is hunting smaller fish and it has a flea method, fish flea. The fish is fleeing from a larger fish. So in conclusion, an interface. Think of it like a template that can be applied to a class. It's similar to inheritance, but it specifies what a class has or must do and classes can apply more than one interface. And we did that with our fish class. It's implementing both the Prey and the predator interfaces. So it has access to both of these methods, but it needs to actually implement these methods by overriding these methods. So that's the basics of interfaces in Java. If you would like a copy of all this code, I will post all of this in the comments down below. But yeah, that's how interfaces work in Java. Hey you. Yeah, I'm talking to you. If you learned something new, then you can help me help you in three easy steps by smashing that like button. Drop a comment down below and subscribe if you'd like to become a fellow bro Sam.