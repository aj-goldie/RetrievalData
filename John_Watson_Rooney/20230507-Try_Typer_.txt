 So I've built command line applications using Python's ARPAS before and it works well.
 It's good. It takes the arguments that you give it from the command line and passes them into
 your application. But then I found TIPER, which is by the same guy that made fast API. And I thought
 I would give it a go. So in this video, we're going to run through a quick demo project and we're
 going to see what's it's all about. One of the reasons why I liked it if I have a look at the
 examples here is that it's basically like building a web application. You can see we have this
 app here and then the app.command with the functions underneath that are going to run when that
 command is run. And it's all tied together with this app run at the end. Okay, so let's give it a go.
 Now I've got near them open here ready to do everything. So I'm going to import a few things in
 first. Now I've already pip installed everything that I need. So we're going to be using TIPER request
 select her lack, hide and ticket the end and rich as well. So the first thing that we saw that we
 needed was this app declaration here. So this was going to essentially instantiate our type application
 here. This is going to give us access to everything. Then we saw we could do app.command as a decorator
 and then pass in something here. So let's just call this one test. And we're going to say we're
 going to give this a name, which is a string. And then we'll just basically print out the name. I've
 been working on my typing a lot recently in case you couldn't tell. And now we need our main and then just
 app like this. So I'm going to save this and we're going to run it. We're going to do Python 3
 our main.py. And you can see that we're missing an argument name. So we can pass that in. Let's put
 John and it's going to print that back out. So you can kind of see how this is starting to kind of
 come together. So what we put in here is the command. And if we had multiple ones of these like this,
 let's put another one here. Let's give ourselves a little bit of room. And instead of
 a test, we said name, we'll put name there. And instead of this here, we'll just print in
 test here like this, just so we can like differentiate. So if we call Python 3 main and then test,
 we get that function, which just comes back and then Python 3 our main and we call it name and we
 going to give it this. We get our name back here. So now we are calling the argument here, the function
 and then whatever we put in goes here. Okay. So now that that kind of like makes a bit of sense,
 hopefully you can see how it's all going to come together. I'm going to remove these because we don't
 need them. And we're going to start working. What we're going to do is we're just going to create a
 simple CLI app that we can give it a Asin, which is an Amazon identification number,
 and we can then get some basic information from that. So the first thing that we're going to do
 is we'll recall the rename this and we'll just call this one get price. And I'm going to say
 that we're going to give this an Asin, which is going to be a string like this. We can get
 rid of that now. So inside this function, we're going to make the request to the server, the website
 for the information, and then we're going to pass it. So the first thing we'll do is we'll just have our
 response is equal to requests requests dot get. And then we'll give it the HTTPS Amazon dot code
 uk slash dot code dot uk slash dp then slash. And then we need to give it the Asin that we're
 actually going to be passing into this function, just like we would have web application.
 But to actually get this to work, we need to have our headers set. We need to send Amazon a actual
 proper user agent. So we'll have our headers equal to a new dictionary. And the first is user
 agent like this. And that's going to be equal to a string, which I'm going to go ahead and copy and
 paste because it's easier. It's format that. So it's nice and neat for my black.
 And now we can then put in our headers into our actual request headers, it's equal to the
 header's dictionary that we got. And then we can print out our response dot text like so. This is
 enough now to actually get the basics of this working because we only have one app dot command,
 we don't actually need to pass in anything else. We can just go ahead and send it in with our Python
 three main dot py and then this Asin, which I just grabbed randomly from Amazon and hit enter.
 And we can see all this information is coming back. So I can tell now that it's working. And if
 you're scraping him as a new guy, the little meowing duck or whatever it is at the end, you know,
 you're on the right track. So now we just want to pass that information. So instead of printing out
 the response dot text, I'm going to say that my HTML is going to be equal to HTML pass,
 sir, then we're going to give it the response dot text here. This is going to give us this
 HTML variable that contains that all that we can actually pass out the bits that we want using
 select. So what I'm going to do is I'm going to go ahead and I'm going to create a new dictionary
 called item. And I'll say that this is going to be the Asin, which is the Asin that we're passing
 into the into this go into the command into our program here. And then we want to say the price
 will grab the price of it here. Now, I'm not going to go into the details of scraping Amazon.
 If you want that, I'll leave a link to another one of my videos price is almost always in these
 one of these selectors. So we're going to use CSS first on our HTML. This is going to use CSS
 selectors to grab the first matching element that's going to match the CSS selector. We're going to put
 in, which is I think it is span dot a dash off screen. This is the one that normally has the price
 in it in Amazon. So we're going to do dot text and then dot strip to remove any extra white space,
 which is inevitably going to be around this element. And then we'll print our item out. And that
 should work. So let's save and we'll run it again. And hopefully we get that information back.
 There we go. We've got it. We can see that we have the Asin and the price return to us for that item.
 So this is good. This is a good start, but there's a few holes here. The first thing that I'm going to
 do actually is just from rich. We're going to import in print. And that just makes it a bit nicer when
 I print to my terminals. So you guys can see everything. Now, the next thing is that I want to do is I want
 to add in some kind of data classes because we are handling data now within our program and it makes
 sense to utilize the functionality that data classes or something similar. I mentioned at the beginning
 that we're going to use will help us with. So we are going to use pedantic. We're going to be able to
 create a couple of models then just to hold our data is going to give us that ability to aid
 do some validation, which we're going to want to do and be just to give us the flexibility and make our
 program a little bit more robust. So I'm going to do from pedantic import base model. So I'm going
 to create two models. And the first one is going to be the Asin because this is going to be the Asin
 that we're expecting to come into the system. And this is going to be from base model. And this is
 going to have an ID which is going to be a string. And the next one we're going to create is going to be
 our item, which again, base model. And then we're going to say this is going to have an Asin, which is
 going to be of type Asin. So you can see that this is now relating to the reverse model that we
 created. And the second one is price. I'm going to leave this as a string for the moment because you
 can see that it's coming back with the pound sign. So it is a string. If you wanted to, you could
 then do something here to make it so that it's converted into a floating point number or whatever
 you wanted. So this is a good start. So let's go ahead and put this in here. So instead of this item
 like this, what we want to do is let's remove these lines. We want to create an actual item using
 our Asin. So we will do item, or let's recall it new item, which is equal to type of item. The Asin is
 going to be equal to the Asin that we pass in and the price is going to be equal to, I've just
 deleted the whole string, but it needs to be hc amount.css first. And this is where we're getting
 that information from so span.a dash off screen like this dot text dot strip. Now I'm going to leave
 these dot text and dot strip here, but you absolutely could put this into the class itself.
 And let's just go ahead and do print new term. So it doesn't complain. Now you can see that I'm
 actually asking for an Asin here and it's saying that it can't actually have that type because I'm
 saying that our item base model Asin is actually a type of the Asin class. So what we're going to
 do is we're going to say that our new Asin is equal to the class of the Asin class that we've
 created. Where's it gone? Asin, there we go. And our ID is going to be equal to the Asin that gets
 passed in from here. So the command line that we pass in that ID goes into and creates this
 base model here. So we have that information there. Now we just need to change this to this. So we do
 new like so new Asin dot ID. So we pass that information in there. And then here we can do exactly
 the same Asin and it should just be new Asin because we're passing it in. Now this doesn't need the
 dot ID because this is the whole class that is expecting up here. So let's save and run and just make
 sure if I've done anything wrong. Okay, I have and we can see that we do get some very nice
 errors when we do this. Okay, and that's because I missed off my brackets there. So we save now
 and run again. We should get that working. Nice. There we go. Now we have this nice printout here where
 we can see we're returning a type of our item and all that call information is sorted nice and neat
 in there. So one last thing that I want to do is maybe add in some text that we know what's happening.
 So we're going to say under our here, we'll do print getting price for and we'll put in the,
 we could just do it like this new Asin dot ID. Okay, great. So that's the most print statement there.
 And we're going to add in here a response dot raise for status just so if we get a 404 or something
 like that it stops our project. It stops our program right there. Okay, so let's write and close
 and run again because you get a price for this and there we have the information back. So as you
 can see, this is quite a nice and easy way to write command line applications using Python. I've only
 used one command here, but if you're interested in this and you want to grab this code, you could then
 go ahead and add this to this, add another command in to do something else or go ahead and add in
 getting more information from here. So I hope you've enjoyed this video. If you have, it would be great.
 If you would like this video, comment and subscribe. That always helps me. And this video right here,
 is going to be more about scraping Amazon, which you might find interesting. If you've not done any of that
 yet and you've just landed on this video.
