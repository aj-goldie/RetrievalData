 So what we're going to do in this video is we're going to write a short script that's going to allow us to compare the price of a product over several different websites. But instead of having to write one script per site, we're going to write one main function, treated it like a bit of a boilerplate function where we can just give it the URL, we can give it the CSS select as well as it's going to return that data for us. Doing it this way where possible is much, much, much neater and it's also much more expandable. So let's get started and I will show you what I mean. So I have my code editor and we're going to import the things that we need. So I'm going to use HTTPX. You can of course use requests if you prefer that at worst just as well. I'm also going to use selecto lax as my parser. I prefer this one. It's very fast and I think it's very handy and it's the best one I've used in a long time. So that's probably sticking with it. So what I mentioned at the start of the video is we're going to write a function that's going to be able to take in a URL and a selecto and then go and get that information. So that's going to entail something like this. So we'll call it get data and we're going to give it a few bits of information. So we're going to have to determine what store we're getting this from. So we're going to pass in store, which will be a string. Then we need to give it the URL. Obviously the URL that we wanted to visit and then also the selecto. The selector is going to be the CSS selector of where the data is on the page. So it knows what to do. So now I can just construct the request. So I'll do my responses equal to 80 tpx.get. And now we're going to say, we want to give it the URL and we're going to need to pass in some headers. I always tend to just do the user agent where possible. So we'll do user agents like this and I'm just going to grab a user agent string from over here. Just sign up to go and get another one and let's put that in there. So now that we have this, I'm going to save and format with black. Thank you, get that all neat and tidy. It's still going to complain to me because the lines too long. Thank you, Flake. I don't care in this instance. So now we're making a request to this URL that we're going to give our function. We need to do something with the HTML data that's going to come back. So we'll say our HTML is equal to the HTML parser for response dot text. From here, we only need to grab one piece of information, which is the price. So we'll say our price is equal to HTML dot CSS first of the selector that we have given it at the top. Then we can just return out the data in whatever function or form we want it to be in. So I'm going to say that I want a dictionary back and I'm just going to put that the store key should be equal to the store information. This is what we're passing in at the top of the function there pointed to the screen, which is I'm sure very, very helpful to you guys over there. That one, that one got it. And then the price, which is going to be the price that we've grabbed there. So this is the basic function that we're going to use. You can see how this could be adapted or how easy it can be to expand because we only need to give it a little bit of information to actually get that data back. Right, so now we want to do our main function. So I'll start that here, please. And we'll put this in the middle of the screen. I love that. I'm sure it's ZZ by the way. So what we're going to do is well, what do we want our information to look like when it comes out? I want a list of dictionaries of all of it that we're going to get. So I'm going to start with my list. And we'll say that this is our results list. And now we can start with our get data function here. We'll skip the putting information in it at the moment and we'll say, well, we got two. Should we start with two? Let's do that. There we go. And finally, we'll just print out our results down here. And then we just need to put in our main if name is equal to main and then run the main function like this. Okay, cool. Save that format with black to make everything neat and tidy. It's going to do this. And we're changing that in a minute. So we now have this skeleton of our program set up. We need to just go ahead and get this information here, the store URL and the select. And now surprise, surprise, I'm going to use Amazon for this and also another website, which is going to have the same product on. So let's go ahead and come over here. So the first thing that we want is the URL. Now I know Amazon URL so we can get rid of all of this and you just want the slash and then everything else afterwards can go away. Let's copy this and start here. So our first one is we want the store, which is Amazon. Let's dispel that right. Then the URL, which is this. And then we want the selector as we would put it into actually search for this information. So let's come back to our browser, go inspect. I'm sure any of you that have done this before know that generally speaking, it is a span with class a dash off screen for Amazon. That's tenderly where the prices are. So span dot a off screen. So this is going to put the selector into here and it's going to return the element back. But what I didn't do is I didn't put here. We want to return it back. We want to strip and we want the dot text from this element there. So if you don't do that, it's just going to give you the raw element information, which obviously you can't pass with your eyes. So you're going to have to ask for the text version instead. So that should work for us. What I'm actually going to do now is I'm going to remove this other one. And I'm just going to check and see if this works. So we can run Python 3 price comp.py. Let's see. Did I win straight away? No, I failed. No, accept a strip. Okay. So I have put this the wrong way around. You can't strip the white space from the text if you haven't asked for the text. First, let's go. Perfect. So you can see now how you can start to use this function just to expand out and to actually choose more and more websites and then get that data sent back to you here. So let's add in another one. Let's go ahead and do. Not that. So let's have another one get data and let's I'm going to format all this up much neater in just a second toman and we want to grab the URL, which is over here. Looks like this paste that in. And then the selector again, let's just grab the price. You would probably want to tidy up the data, tidy up the day through a little bit. Span div class price by the looks of it. These selectors are nice and easy. Yes, that is by designed. No one needs to see really long, horrible CSS selectors when you're trying to explain something to them. There we go. So this is now sorted this out. Although for some reason, it's put these other ones, put this one over a different line. So what I'm going to do just because is put these over the other line as well. Just to make this a bit tidier. Great. Cool. So let's run this again now and see. So now we can see that we have our list of dictionaries as the store and the price for these two bits that we've put in. So if you found this product somewhere else, or maybe you had three or more stores, instead of writing all of this extra stuff again at the top, let's go up to it. Instead of writing this for each one, what we can do is we can just ship that off up here because obviously don't repeat yourself with your code and we can then add in them down here. So this is pretty short and simple, but hopefully you kind of get the idea of where you can go with this. And this one will go particularly well with the email script that I wrote, which you're going to want to watch in this video right here. Come on up. [BLANK_AUDIO]
