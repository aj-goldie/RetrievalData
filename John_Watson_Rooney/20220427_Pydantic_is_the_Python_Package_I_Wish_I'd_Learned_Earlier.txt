Whenever we are dealing with data that has come from somewhere outside of our program, maybe from our end user or from API or something like that, we really want to be able to check it, validate it, and put it into a into a neat format so that we can send it through our application without it causing a massive issue and burning the whole thing down. So in front of me I have some JSON data which I have put together ever. And if we have a quick look we can see that for example, some of the prices are strings and some of them are integers. The rest is fairly self explanatory. But what we're going to do is we're going to use Pydantic to actually set up models for this data. We're going to import it and I'm going to show you some of the cool things that it can do. So we're going to do let's make this a bit bigger. From Pydantic we're going to import base model. So this is going to be how we are going to define our data, including the types that they're going to be. So let's have the first one we'll have class product. So this is going to be the main product class that we're creating which is going to inherit from the Pydantic base model. So if we look at our data we can see that we have each one of these is a product and we have an ID and a title. And then each one has a list of variants as well that has their own specific pieces of information. So the first thing we're going to do is we're going to say we're going to have an ID and it's going to be an integer. And then we have our title which is a string like this string. These are the first two pieces. Now what we're doing you can see is that we're saying this is the field and this is the type that it's going to be. So the last one is our variance. Let's move this in here our variance which is going to be equal to a new model. Now we're going to be saying that inside this product model here we have this variance. So we're going to say we're going to have our variant here. But this is going to be a list, always going to be a list. So we'll do list of variant. Now we need to import this in from typing. There we go. And we'll need to create this as well. So we're going to create this class here and this is going to inherit again from the base model. We don't need pass, thank you. And we just need to now grab what information we have for each of the variants. Name, SKU, available and price got the name which is a string. We'll have the SKU which is also a string and we have the available available which is going to be available. Well, there we go. A Boolean. True or false. And then we have a price, which I'm going to say is going to be a floating point number in this instance. So save that. So now we have this variant base model, this variant class that we can call in here. Now we might want to think that maybe each product, not all of them are going to have variants. So I'm going to go ahead and put optional in here and wrap the whole list to make it optional. And we're going to import this as well from typing up there C. So now we've got our data defined and we're saying that this is what it's going to look like. It's going to have these data types and these fields. So we can really start to look at how Pydantic will help us now that we've actually defined this over something like just using a plain dictionary. So let's create an item using our product class. I'm going to say product is equal to, item is equal to product. And we're going to need to have our ID here and this should be equal to an integer. So let's just do 123123 and let's move this down. And then we're going to have the, what did I call it, title, which is going to be a string. So let's just have this as cool shirt. And then we have our variance. So we'll say variance. Variance is going to be equal to. And this is a list. So we've said that it has to be a list here. So if I was to try and make this something else, we would get an error. It wouldn't work. We're going to say have a list. And inside this list we're going to have each individual variant like this, so we can see how it's starting to stack together nicely. So the variant had a name, name was equal to. I'll just say that this one was small and then it had a SKU. So we'll say our SKU is equal to I'll just do ABC, one, two, three in this case. And then the available available is equal to. And we'll make this Boolean because it needs to be a Boolean. True. And our price which is going to be 24.99. So there we go. So we've now constructed how our product is going to look. Now what this does is this means we can have access to printing out or access to things like the item dot. And then our code editor is just going to give us the options here that we have available to us. So for example, if you just wanted to access one of the variants, you could do items, variants will access the first one in the list. And now we have everything automatically here, nice and available to us because we know exactly what it should be and how it should look. So this is a much better way of working with the data. So let's just add a few more variants in for the sake of it for the moment that will move itself in just a second. Let's put medium, we'll change that. What we'll do is we will remove the zero 99 from here and we'll turn this into a string. So let's just fill that out there and let's go ahead and print out the whole of item and you'll see that what actually happens is that because we've defined the available as a boolean, it's changed it from a string of false to an actual boolean false. And the same with the price. We've said that the price is actually going to be a floating point number. So it has changed it from an integer to a float. And if this was a string, it will do exactly the same thing. It's changed it here. So this is a really neat little thing within Pydantic, which means that when we're importing data in and I'll show you that in a minute, when we pull this in from our data JSON file, that we can have it change the type for us. If it's obvious what it's supposed to be, which is really cool, I'm going to move on to validation just for the moment. But I can hear you already saying but what if? I don't want to have to type this out all the time. But I'll show you when we actually make getting the data from our JSON file, I'll show you how easy it is to create your item classes from that without having to type it all out every time. So we'll get to that. But what we can do is we can actually have a validator. So I'm going to import the validator in here and underneath the variant class I'm going to create my validator. So I'm going to say this is a decorator and we need to give it the name of the field that we're going to be validating against. So we'll do SKU, not skew. SKUs. So we're going to check that we're going to validate against this field here. So we're going to say have a new function and we'll call this one SKU length. So we're going to validate the length of the SKU for each time we need to pass in not self, we need to pass in CLS, which is a class method, and then the value. And now we can just check the length of the value. So we can say if the length of our value is not equal to and let's say seven, we're going to give it an error. So we're going to raise a value error and we're going to write in here SKU must be seven characters. 78, no, seven characters. So what we can do is we can start to construct our actual validation for the data that we've got. And now in this case I'm just raising an error which is going to stop the program, but you could do whatever it is in here that you wanted to. So if we check out my SKUs in my variance, they are only six. So when we run this, I'm going to get this SKU must be seven characters in my value error that I put into my validator here. So let's make these seven. There we go. And we'll run it now. And it's passed the validation. So we have our item all neat here with the correct data types, all validated based on our SKU length validator. So that's all very well and good, let's just remove this. But what if we wanted to import data in from an external source, which is what this is all really for. So I have my data JSON file which has some results in it. We have two different separate products with their own different variants. So let's go ahead and say with open and we'll have our data JSON. Don't know what PyCharm is doing there. Lovely, thank you. I don't need all of that. That's really annoying. As F we'll do JSON load because we want to load this in load f and we'll save this into our data here. And we need to import the JSON in from Python at the top. There we go. Now, because this is now a JSON object, what we can do is we can say let's have our items list is going to be equal to and we're going to use list comprehension and we'll say that each one of these is going to be using our product base model. We do star star item and we just do for item in data results. Now, the reason why we're doing data results is because I've actually put a results key in at the first part of my JSON file. So just by doing this line here, we're now going to import all of the JSON file, all of the items in to this items list with just this one line validating against both of our classes here and our SKU length validator. So when I run this now and we get all of this data back, although we'll notice here that in my validator we've got SKU is equal to none. And that's because I forgot to return the value if it is indeed correct. So now we've done that. We have the information here all how we wanted it. So there's our product ID title and the variance list there. And again we could access this the first item here's, the title, or we could go the first item the variance and then the second variant in the list name just like this. And you have access to the data using the format like this, which is just so much better and so useful. Now you will find that things like this and the type hinting, it's very useful getting all your data in order. And it's obviously seen a lot in orms and I did a video actually about the SQL model orm which uses a combination of SQL, Alchemy and Pydantic to create your models, making your database nice and easy to put all your information in, in the correct format with the correct types. That video is right here. I think you'll enjoy it. Thank you very much for watching.