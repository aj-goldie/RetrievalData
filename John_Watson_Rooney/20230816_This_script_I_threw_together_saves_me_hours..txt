So I'm going to show you a tool that I wrote for myself that loads up the page using Selenium Wire and checks all of the network responses and requests that it makes. So we can easily find that JSON data that's in that backend API. So we don't have to keep loading the page and looking at seeing what's going on. We can give it a URL, it will load it up and it will get a nice list out of URLs and also the responses saved to a file for to interrogate work out what we're doing. I like building tools like this, they make your life so much easier. Hopefully you like this one too. So we are going to be using Selenium Wire which is an extension to Selenium. It kind of adds to it. So you'll need to make sure you pip install that. And then we're going to go ahead and do from Selenium we're going to import in driver and then we also need some of the utilities. So from Seleniumwire utils we need to import in decode. Now I'm going to import decode in as decode SW because we are going to be using the normal decode as well. I'm also going to import in JSON because we will need that later on. So what Selenium Wire does is it will load up the page and it will then show and check all of the network activity that that website is doing. So we want to be able to see that and we want to be able to intercept that so we can create a few functions first. So what I'm going to do is I'm going to call this one show request URLs. So what this is going to do is it's going to just return us the URLs that the site has made requests to. Externally, this is where we can easily find the API. So here we need to give it the driver and I'm going to cover this in just a second. And also a target URL so it knows what to load up within this driver. I'm going to do driver get. This is basically going to the page and we'll say target URL. I'm going to create a blank list here of URLs so we can add them to it. And from here we basically just want to interrogate the requests. Now we do this for using the driver request. So we'll do for request in driver requests and we'll just append it to our list URLs append. I'm going to make this a dictionary of the key URL and then request URL. So this is the first part of our Selenium wire that gives us access to this request and the driver requests here and also the responses which we'll do in a separate function. So I'm just going to return the URLs from this function and we'll create a new function which will be our main. This is where we're going to run everything so here we need to actually initialize our WebDriver. So I'm going to say driver is equal to WebDriver firefox. You can use whichever one you like which is installed. I like firefox. Massive firefox. Fanboy. And we need to add in some selenium wire options here as a dictionary because when we get the response back, it's going to be encoded or it's going to be bytes. We want to make sure that it doesn't do any extra encoding. So we'll do disable encoding is equal to true. And this needs to be a dictionary here. So now that we have this driver, we can then use it within our show request URLs to actually open the web browser and load it up. So I'm going to say that our target, I will just call this URL is going to be equal to I'm just going to grab it from over here. We'll use this website here as a good example. So now we're going to say that our URLs is equal to actually I'm going to change this because that is going to be a bit confusing. Target URL. Okay, so now we'll have our URLs which is going to come back. What's coming back out of this function is going to be equal to show request URLs. And we'll pass in the driver which we've created and also the target URL here like so then let's just run through these URLs and print them out for URL in URLs, print the URL out and then let's make sure we run this function so main. So if name is equal to dunder main and then we'll just run the main function, then we can just run the main function like so. So let's save that. Can I format with black in here? Don't know. Save that. Great. So let's give this a go. Let's run this now and check and see if we've got anywhere. So I'm going to hit run. Hopefully this is going to load up the browser. As you'll see it happens on the right hand side. We're going to go to that target URL, which is that website that I put in here and it's loading up. And we're going to get back a load of URLs that this page is now making requests to. Like so now this didn't close because I need to add that in. But you can see we now have all of these URLs. Now that's everything that every network request that's happened when that page was loaded up, a request has been made to one or many or all of these URLs rather. So this is really interesting and we can actually look through this. You'll find some things more interesting than others. Probably the ones that you're going to like the most are ones like this where you can see we have this full URL for the API search and then this product Identifier. This is really what you're looking for. And this is going to give you a good idea of how you can actually get the data from this website. So I think that this is a pretty handy way of looking at it. What I'm going to do now is I'm going to add in my driver close because we want to make sure that this browser closes when we are done. Another thing that I do like to do because we're looking at URLs is maybe have a list of keywords. Like perhaps we want to have product or maybe even you want to put in API might be a better option. So we want to know there's an API coming back and sometimes the API might have something like V one in it or whatever you'll use keywords depending on your knowledge of the target site and what you've sort of decided you want to do or just general knowledge. Overall I tend to have been using just API, but what we'll do is we will then have a look and check these URLs. So we'll do for keyword in keywords if kw for our keyword in URL, print the URL out like so of course I need to reference the dictionary key here because otherwise it's not going to know where to look. We're searching within the key rather than the value. So we want to look for key in the URL value. So this should give us now the list. Okay, so there we go, that's a bit better. So now we have a list of more condensed URLs that have the API keyword in them. And this is a pretty good start, gives us a good idea of what's going on. But we can do more because we can actually then interrogate the actual API response, which is obviously going to be JSON. So we've got a good opportunity to actually just grab the data there and then that we might want. So I'm going to create a new function and I'm going to call this one show response and we'll say driver again. And we want the target URL, target URL and we'll need to do the same thing. Here, I'm just going to grab this and we'll paste him in here. Now we'll say our responses is going to be equal to our blank list and we want to now look at how we handle the encoding. So I'm going to say for request in driver request. So we need to access the request because we need the response from the request. We're going to need to do a try and accept. Now this is a bit messy. I'm not really sure what the best way to handle this is. So if you know a better way down in the comments below so we can all benefit. So I'm going to say our data is going to be equal to decode SW. And within here we need to pass in a couple of bits of information. The first one is going to be request response body because we want to decode the response body. We also want the request response headers get. This is going to basically get the information, it's going to understand the headers that are coming back and we want content encoding. This is all from the documentation for selenium wire and identity like this. Then what we want to do is we want to say response is equal to JSON loads because we want this to be JSON information. If it's not JSON data, we're not interested. So we're just going to discard everything else and then we want data decode. And this is why I said at the beginning we import Selenium and Wise decode as decode SW because we are now accessing Python's decode and we want to say this has got to be utf eight. This is going to give us the actual information that we want. So if this is valid, if this works inside our try block, I'm going to do responses append the response that we got back just here. And if it doesn't, I'm going to do that thing that you probably don't want to do. I'm just going to straight up ignore those errors because I don't care. We want to then return out here responses like this. So now we have a nice neat list of only the things, only the responses back from the back end to the front end that are JSON encodable. That's the information that we want. Like I said, we're going to discard everything else. So now what we can do is I'm going to say that our responses going to be equal to our show response again driver and the target URL and then we can actually save this data. Now, you'll notice here that I am actually loading the page up twice. And this is intentional because my idea going forward with this is I will have some kind of argpass or maybe even go the full route of click and we'll be able to choose whether you want to see just the URLs or the responses or both. So I've got them separated like this for the moment. Also means you can choose as well which ones you want, whether you want the responses or just the URLs. So we are going to load the page twice. I don't see that being a massive issue. So underneath this, so we do get the URLs, I'm going to do with open and we're going to save these responses into a JSON file because there's a potential, there's going to be a lot of them and there could be a lot of data. So it's definitely worth saving. So I'm just going to call this data JSON W and we want to do as f and we want to do JSON dumps is our responses into our file there and let's give ourselves a little space there now. So if we go back to the top, we have selenium wire which we're using, we have our first function which gets the URLs, which gets the URLs that's being requested to our responses then. So when we open this page you'll get all of the information back nice and neat that you can just see and interrogate as opposed to having to load it up in your browser and have a long look around through the network tab and see what's going on. Now this doesn't entirely replace that but is a good start and I think this can be improved and built upon too. So let's run and we should get our data JSON file out and also our print of URLs that are requested with that keyword in that we've chosen in this case API. So you'll see the page does load twice as explained earlier, I'm okay with that for the moment and we've made a mistake and this needs to be requests, not request. Otherwise we're going to get that error that we just saw here, which means you can't do it because it doesn't exist. So this should work. Now this time one more small error. Dump to file, dumps to string, third time lucky maybe. Okay, so that finished and we do have a data JSON file so let's open that up. I think I can format document. There we go. So now we can see all of the JSON information that came back and we have this items here. So this could be interesting for us to look at and find out more about. There's a product URL, all sorts of information. We could scan through this and have a look and see what information is available using this method to scrape data. And of course this is my preferred method if we can do it. And this tool that I've just shown you hopefully will help you know whether you can or or cannot use this method or whether you need to take a different approach. So hopefully you have enjoyed this video and got some value from it. I have a patreon which I'll link down below. There's a free tier, check that out and also like and subscribe really helps me out. I hope you've enjoyed this video. Cheers, see you in the next one.