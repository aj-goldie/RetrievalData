 Although a lot of the modern web is JavaScript and single page applications, there's still a large chunk of it, which is HTML. And in this video, I'm going to run you through a complete web scraping system for HTML websites. We're going to cover pagination. We're going to look at URLs and how to join them together. And we look at storing the data into a data class, so we have access to it. And we can then move on with it how we want to. So what I'm going to do is I'm going to start with just importing in the things that I need and I like to use HTTPX and select olax for my main course. So we're going to do HTTPX and then from select olax.pass. We're going to import in the HTML parser. If you want to use requests and beautiful soup, you can. You'll just need to change a little bit of the code, not that big a deal. Now we're going to use data classes. Now I really am quite a fan of data classes. I think they're a great way of actually storing the data that you're doing. And we are dealing with data, so it makes sense to me that we use them. The next thing that we want is actually the URL pass. And this is within the standard library. So we're going to do from URL lib.pass. We want to import in URL join like so. This is going to give us access to being able to easily join URLs together. You also have URL URL pass, which lets you split them out so you can then take the path. We don't need that in this case. And finally, I'm going to import rich because it just makes it a bit easier to see what's going on in my terminal. So the first thing that I'm going to do is I'm actually going to look at the data that I want to do. We're going to create our model if you like for our data, which is going to be our data class, so data class and then class products like so. So if we come to the actual page, you'll see that we have this sort of main product page with pagination, which we're going to handle. And then we have the individual product pages. We're going to visit these and then grab some information from here. Now, there's a lot of information on this page. You could go ahead and grab like all of this table information to save much time typing out and everything. I'm going to only grab a few bits. We're going to get the name, the price, the skew, which is this item number here. And then the rating number there. So let's fill that in. We'll have our name, which is going to be a string. We'll have the skew, which is also going to be a string price. Now, I like to leave the prices of string because I want to think about what I'm actually going to do with the information I want to do with the currencies, et cetera, et cetera. And the floating point numbers are the best for prices because they can change when you get into decimals. So you actually want to use the decimal class when it comes down to it. I prefer to leave it as a string until I'm ready to decide what I'm going to do with it. And the last one was rating. String as well. Again, same deal. Leave it as a string. We can change it later if we feel like we need to. The next thing I'm going to do is I'm going to create another data class. And I'm going to call this one response. Now, I've started to do this and I think it's really good because it gives you a way of just managing the response data that you're getting back. We can actually put in the HTML itself into one part of it. And then we can have in this case, we can have a next page link. So we have another one. And we can call this response on every page that we get and it's going to make it easiest for easier for us to manage as we go along. So I'm going to call this body HTML. And this is going to be an HTML password type. Now, this means that when we access this variable from within this response data class, we have this a selector lacks HTML password. We can then query with CSS first and CSS if we need to. The next thing is going to be next page. Now, when we query these elements with the HTML parser, we want to be able to get the attributes for the next page because h ref, which is the link to the next page is going to be an attribute. So I'm going to say that this is going to be a dict because that's how it's going to come back. And you'll see how this all comes together in just a minute when we get going. So the first function I'm going to do is going to be called a get page. So let's make a function called get page. This is going to take in a client and a URL. I'm going to fill that in in just a second, but the client is basically going to be our HTTPX client, which is the same as request session. We're going to need some headers. So I'm going to do headers is equal to user dash agent. And I'm going to grab a user agent string from the screen just so it's nice and easy. Let's put that there. The next thing we want to do is want to say our response is going to be equal to the client client dot get URL and our headers are going to be equal to the headers variable dictionary that we just created. Let's just fix that and save our format now again. No. So now that's formatted properly, we're going to go ahead and deal with this response that we get back. So as I showed you, what we're going to do is we're going to return out our instance of our data class of response where our body HTML is going to be equal to the actual HTML that we get. And then our next page is going to be equal to the next page variable. But before we do that, we need to actually create them. So I'm going to say HTML is equal to the HTML pass set. And we're going to give it response dot text. Now we have this here. So we can actually pass this one in here. So let's do HTML. This will give us access to it when we want to call the response dot body HTML, that's going to give us that we can pass. Now we need to deal with the next page. So what I'm going to do is I'm going to say if the next page is the selector, which exists, we're going to put it in as next page. And if it doesn't exist, we're going to just put in our own dictionary of false. So when we want to break out of our main loop later, we have that available to us. So let's come to the page again, scroll down and find the next page button here. You click on it. We have this span ID and here's the link. So you'll notice that this is just a shorter link and this is what we're using. URL join. But we have this data ID, pagination text, exact, exact, etc. So what we're going to do is we're going to do is we're going to do each email dot CSS first. We're going to put our selector in here, which was on a attack and it was a data dash ID equals to this thing, like this. So if this is going to exist, we're going to say our next page is going to be equal to the attributes of this element. So we'll do CSS first. I'm actually going to be copying this out again. Not to worry. That's an our problem, data dash ID, going to be equal to that. Like so dot attributes. Now you'll notice if I put this in here next page, it's going to tell me that next page is possibly unbound. And that's because we don't have anything to handle this, the other part of this if statement. So we need our else. Next page is going to be equal to and it needs to be a dictionary because that's what we chose. And we're going to say it's going to be atref, which is going to be the same as the key from the attributes. At ref is equal to false. So that was quite a lot to do in one first thing, but this is made it so we now have this get page function, which is going to manage getting any HTML page for us and it's going to return it in the format that we've chosen with this response data class. So we can use this on the main page and we can use this on the detail page. The fact that the next page is going to be equal false on the detail page is irrelevant to us because we're going to be ignoring it. Whereas we do want it when we're going to come to actually going through all of the pagination. So let's check that we've actually done this correctly. And let's create a main function and a new client. So we'll say our client is equal to the HCCPX dot client. Now I'm going to do it like this. So I'm going to manually close it. We'll do that later when we break out of our main loop. Then we'll say that our URL is going to be equal to. I'm going to grab this URL here. Like so. Now we have our function, which is called get page. So let's try it out here. So we'll do print get page. Get page is not that great for. There we go. URL like so. Now we just need our if name did have a macro for this is equal to main, which basically just means that if we call this file directly, we will run this main function here. Right out Python 3, scrape a dot pi and we should get back some kind of information. So this is our response class. This is what we created. So now we in this body HTML, we have all of the HTML parser, which we can query with our selectors. And we also have this next page attributes list here that has all this information. And that's the main attribute that we're interested in the h ref. So if I was to go ahead and make this at the last page, which I believe is going to be 24 like this. And we try it again. We should get our next page is false. You can see it right there next page, a traffic is false. So that's how we're going to break through breakout of our loop when we start to go through every single page. Cool. So on this page here, this main page, we're going to loop through all the pagination. We want to grab all of the product links. So I find the easiest way to do that is just to go back up the tree until you find something like search results. There it is. There's search results. And then we have this URL and then all of these L I classes. Now, these all have the same sort of like long class name. I don't like these ones. Although they are actually the same, I find it could be that they might change or something like that. Or maybe they're dynamic. So what I prefer to do is just go for the first one that makes sense human readable and then go down from there. So we'll go div ID search results, UL L I A, which is down here. So let's copy that. And let's make our pass function. So we'll have, we'll call this one pass. Links. And we're going to be giving this the HTML from the page. So we'll say our links is equal to HTML dot CSS because we want to find all of them. And it was a div and the ID was this UL, the first one, then all the LIs. And then I think this should get us the first a. So then we can do, we can return out. And I'm going to use list comprehension. So we want to do link dot. 80 Tars, I think 80 Tars for the H ref because we want the H ref attribute for link in links like so. So now we can try this out. So if we go over here, get rid of this, get rid of that. Get rid of this. Come here and we'll say that our page is equal to. This we can then ask and to do print our pass links on the page dot body HTML that we have put in here. We need a closing bracket like so. Let's try it out now. So we should see a load of links come through. Hopefully, yes, there we go. But what you'll notice is that they are actually duplicated. So there's a couple of things that you can do here. You could either try and redo your selectors a little bit to try and make sure you only ever get the first one. Or what you could do is you could turn this from link comprehension into set comprehension. So set in Python never has any duplicates. And that's super easy to do. We just change these to the curly braces. And now when we run it again, we're going to find that we don't have any of the duplicated links because that set comprehension has sorted it all out for us. There we go. We have each individual one. And we are on the last page, which is why there's not that many links there. Okay. So I'm going to remove this page thing now. There we go. Save. So we know that we are getting all of these page links. Now we're going to move on and complete the pagination part before we go to actually passing the details from the page. Now what I'm going to do is that because this main function is going to get quite messy is I'm going to create a new function that's going to be our pagination loop. So we can actually handle it inside there. And then we can call the detail, the detail function that we're going to create instead of putting it all in the main function. So I'm going to say pagination loop. And this is going to take in the client because we're going to be making HTTP requests. And also, I know that's everything I think. So what we're going to do is we want to start taking some of this information. Now we don't want to do the client. We want just this for now. Let's try that. Put you in there. And we can remove these from here. Good. So instead of printing, we'll leave this in for now just so we know where we're at. So what we want to do now is we want to handle with this page, the next page thing that we got. So this is going to go inside a while loop. So this is going to be while true because we can easily break out of this. So we'll put that in there and we'll put you in there. We might delete you into a minute anyway. So now what we're saying is that we're going to be going through this while loop every iteration. We want to change the URL that we're getting each time with the new HTML that's come back from our page dot next page that we're going to be getting from this next page, the get page function. So what we can do is we can say if page dot next page and the H ref here is false. We're going to do our client dot close and we're going to break. So what we're saying is that if we hit this false, which is what we've got here, where there's no next page button, we're going to break out of our while loop here. So we have to have an else because we want to then handle what happens when we do want to carry on when we do have this next page link, we want to construct a new URL that we can then go back up to the top of our loop with a new URL to go to the next page essentially. So if you are L is equal to URL join and we can give it the URL and the next page page dot next page and the H ref here, like so. This is basically going to add in that query parameter, the question about pages equal to for every time we go through. And what I'll do is so we can see this is our print out the new URL at the bottom every time we go through. So let's put this pagination loop function in here, pagination loop and add in our client, like so, save format with black, worked nicely. So this should work for us. I am actually going to remove this or just comment it out for the moment. Let's clear that up and run now. So hopefully we should see the page numbers come through going up and up and up, which they do. Now, I'm going to let this run so we get to page 24 and hopefully we do break, but you can see how this how useful URL can join will be in these instances. You can easily grab the attribute for the next page and you can combine your main URL, which is we've got here with that next one to create the new URL that you're going to be wanting to do. It's much better than just trying to concatenate it together because it's specifically designed to do this function here. Another good one you can do is URL pass and that will just break the URL up into pieces for you. So you can easily construct, remove, replace whatever you need to do. And as you'll see, we managed to get to page 24 and we broke neatly out of our function. So let's work now on actually extracting the information from each of the products that we want. Now, when I'm handling getting product information or any kind of information and I'm extracting it, what you want to avoid is that index error when you try to get a piece of information that exists on one page, but doesn't exist on another. And to do that, I usually create myself an extract text function like this that will take in the main HTML, a selector and an index, and it will do the try and accept for me here. So we're going to do try. And if it works, we'll return our HTML dot CSS for the selector that we're going to give it on the index that we're going to do. And then we're going to return text and strip is equal to true. Thank you to whoever told me that that was in there. I never bothered to look the more you know. Thank you very much. Now, we can do is we can say accept index error. So we want to say if we hit this index error, we can do something else. And I'm just going to return none in this instance. It's up to you how you handle it here, but I'm returning none just as a string of text so that if that piece of information doesn't exist for that specific product, we'll just get text that says none, which is nice and human readable and human understandable. It may be different for you, whatever try and information you're trying to get. So now we have this extract text function. We want to actually pass the detail page. So we'll do pass detail and we're going to be giving this the HTML as well. And we're going to be creating a new product. So we'll go new product. It's going to be equal to our product data class. And this is going to have bits of information in that we specified at the top. So we'll say our name is equal to an our extract text function and the HTML and it's going to be a selector, which will do and an index, which is probably going to be equal to zero in this case. So let's add in the rest of the information here. So it was name, skew, price and rating. Okay, new product is my access. No problem. We're going to print this out for now and we'll model the cycle we're going to do at the end. So now we just need to grab the selectors for these items for this part of the products. And the first one is h1id of product page table. So let's go and get that in here h1 ideas a hash product page title like so skew. And we can do it on the ID or the class will do it on the class. So it was expand span dot class. Oh, like so. There we go. Save that. And the next one will be the price. So again, prices here. And we have class price dash value. Let's go and do that span price value. And then the rating. Now I am only getting a few bits of information. As I said, there is a load more on this page. And there will be different ones depending on what you're doing. So you can go ahead and choose and add in. Now the good thing about this is that because we have separate functions to handle this and we have our data class, all you need to do is add in here what you are going to get. So if you wanted to grab all of this table information, for example, let's go here. You'll see that there's all of these text specs, table class rows. What I would suggest is making this a list of dictionaries maybe where this is one thing or this is another. Does that might work? Yep, you could go ahead and do that. So to do that in the data class, you would just do let's call it specs. And we would say list of dict like so. We're not going to do that because I've just involved load of typing out, which I don't really fancy doing or hiding out. Okay, so now what we can do is we can actually work on looping through all of the pages. So down here, this information here is going to have all of the links in it. So we can create a new function that's going to actually go to that past the information that comes back from that link because we can use our existing get page function to do that. So I'm going to create a new function here and we're going to call this one detail page loop and this is going to take in the client because we're going to need to make requests and also the link that we want to go to. So the first thing is to actually create a base URL for this. I'm just going to call this base URL because if you look at the product information, it is actually a different start URL than the main one. So it will need a new base URL there. Then we can have our product links. Let's do product links, which is going to be equal to this down here. I'll just retype it. Pass links on the page dot body and this is wrong. This shouldn't be linked. We're getting the link. We want to take, we want to give it the page. So when we can come here, we can ask for the page dot body HTML like this. Now to loop through, we can do for link in product links. We'll need to go to get the page. So we'll just say that our detail page is equal to and we want to go and do get page get page and we need to give it the client information and also the URL that we want to go to. Now we're going to use our URL join again. So URL join on the base URL that we just created and the link that we have. So this is going to construct the URL for the actual detail page. Then from here, we can do our pass detail function on the detail page that we just got back dot body HTML. We just need to put this into our code here. So we can remove that and now when we call the detail page loop here, detail page loop with what information do we need to client and the page client and page. This is now going to run client for every time in our loop. So we're going to grab all of the information from every product. So let's save and we'll run our code. Hopefully we get the product information come back. There we go. So we can see that we're getting a nice neat format of our actual product data class and we're going to go through every single one on that page and then go to the next page. There it is page two and start going through again. Now the good thing about this data class is that we could easily export these as a dictionary. If you want to do something with them or whatever we want to do, we can output them anywhere, save them, whatever you want to do, put them in a database or simply put them into an Excel file. We decided to go with data classes on this one where you could absolutely use pedantic if you wanted to or even access, which is another one I quite like as well. But I've enjoyed the simplicity of data classes just for holding that specific piece of information. So hopefully we've enjoyed this video and some of this hopefully makes sense to you and you can understand the logic behind why I've done what I've done. Let me know in the comments what you think, whether you would do any of this, whether you can pick any of up and use it or whether you think I've just written a whole load of code for no reason whatsoever and all you can just do this in a few lines. So let me know how you get on. If you enjoyed this video and you want to know how to scrape data that you can't do like this with HTML and there's a JavaScript website, you're going to want to watch this video next that explains how to do that. [BLANK_AUDIO]
