 Generally speaking, Python decorators will change the function that they're decorating in some way. But there is another use for a decorator called a registration decorator that we can use in a slightly different way. It's not going to change the function, what it's actually going to do is we're going to allow us to add it to a central list where we can then do something on we can make sure that all of our functions run. When I show you the example I think you'll understand what I mean and I think you'll understand how powerful this can actually be. So let's do our data list and let's create ourselves a couple of functions. So let's call this one get API one and it's just going to return a string data one just so you can kind of understand what we're trying to do here. We'll have the same thing again and we'll have another function get API two and again this will just return data. Okay so let's run these now let's create our main if name is equal to main and we'll say let's add them to our data list. So data list dot append and we'll add this first one in get API one and then we'll do the same thing over here except we will do number two like this. Okay so to actually run these functions now that are inside this list we can just do a for loop so we'll do for for I in data list and we'll print out what comes back. Okay so let's run and we'll see that we get our data one and data two back. So this is going to work well for us but what happens if we want to add multiple more of these? Well let's have get data API three but adding more information more information so we'll return data three. There we go pound like this. So again we're gonna have to add this in here and we're gonna have to change this one two three and now we're gonna get all that information but this is going to cause us problems because every time we add a new function we're gonna have to add it to the list in some way so we can actually keep a track of it. Now if you imagine this is spread across a multiple file application or something like that you can see how this is easily going to get lost. So what we're actually going to do is we're going to get rid of all of this and we're going to write ourselves a new decorator function. So I'm going to put this up here. So I'm going to call this one we're going to call this one register API and it's going to take in a function because it is a decorator. Within this function we can simply now call data list dot append the function that we're giving it and then return the function back. Now remember how I said at the start generally speaking decorators will change the function in some way. Well that's why we have to return the function now because it's going to wrap around it. But we're not changing this function anyway all we're doing is we're appending it to our list. So now if I decorate these functions, our register API decorator, now I'm gonna have these in this list here already. So let's save and run again. We can see that we have these two functions. So that's actually called a method and there we go, there's two. So now to add any extra ones all we have to do is use our decorator here and it's going to be automatically added to this list because of our register API function decorator function here. So now every time we add a new one of these that gets a different piece of data, it's going to be able to be added to this list so we can map it out and we can just run it nice and easily. We don't have to change any of this down here. We don't need to change our list at all. This function, three lines, it's going to do it all for us. So if you've enjoyed this video, I think you're going to like this one next where I talk about adding arguments and keyword arguments into functions.
