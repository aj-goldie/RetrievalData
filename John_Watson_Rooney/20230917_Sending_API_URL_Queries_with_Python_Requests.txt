Working with APIs, really useful skill. This piece of code here basically just goes out to this endpoint. We put the character ID on the end of the URL and we ask for the data back. So when we run this you can see we get this information which is relating to this ID and this character. Now that's all well and good, but these endpoints we can actually search and filter against and this is one of the skills that we're going to need to do. Now let's build up together a function that we can use to search against it based on these search criteria here. So the available parameters are these ones. Let's build it up and let's see how we get on using F string. So let's say search character. Now we need to think, well, we're going to want to search under name, maybe status, maybe gender as well. Let's use these three. Okay, so we'll do response is equal to requests get and we want to have the base URL we want to add in. Okay, so now we need our S string. So we're going to want to put in the question mark because these are query parameters. Then we'll have name is equal to our name that we're going to pass in and the same for the status, going to be equal to the status and the gender as well. Gender like this. Okay, this is a pretty long URL but okay, we can work with that. Let's just print out response JSON like so save. Now if we were to try and use this, we'll quickly find that when we search here, if we don't give all of the actual parameters within this, we're going to have problems because it's just not going to work. So you can see that it's missing a required argument, which is the gender that we've missed off here. And if you put in gender it would still think you're missing that because we didn't specify keyword arguments here. And also this is now going to be quite long and really difficult to manage. So this is not the right way. Now what we can do using requests is we can actually give it a dictionary with parameters that it will then actually construct this query string for us so we can remove this. And I'm going to put in search into here and I'm going to remove all of this as well. And then we can have in here go to the base URL and then our parameters is going to be equal to the search dictionary that we give it. So if we have a look at the source code for parameters, you'll see here, this is for the get request. And you'll see it says params optional dictionary, list of tuples or bytes to send in the query string for the class. So we know that we can pass in a dictionary here. So let's close that out. So let's create a dictionary we'll do our search, it's going to be equal to here's our dictionary. And one of the keys was name and let's add that in and also Status. Great, cool. So we can now do our search character and pass in the dictionary that we've just called search. So I'll do search is equal to search. So we know what we're doing here. Like so okay, let's run instantly better. Okay. So now we have if I go to the top, I will change the output in just a second. You can see that we have the info, three pages and these are the state, these are the queries that we created. This is the next page key just has the whole URL in it, which is handy. So you can see that we have these ones here and Requests has created that for us. Now just to make the output a little bit easier to read, I'm boldly going to print out the info section. So if we save and run again, it's just less for us to look at. So you can see we have this here. This is obviously much, much better. And we can add in more here. So we could have page and let's put in page two like this. And we should now get page two. We have a next and a previous. Okay, so you can see the next page, previous page. So we know we're on page two, but we have no way in our code that specifies what these search parameters are. We know them because we've just looked at the documentation. But there's got to be a better way for us to handle this. And of course, this is Python. There is. We're going to use data classes. Now the thing about data classes is that we can construct it and then we can use as DICT to output them as a dictionary, which is going to go into our parameters. So let's do that. Let's do from data classes import in data class and as DICT. I think it's just as DICT like this. Okay, so we'll do that. Now let's construct this up here. So we'll do data class and we'll have our class of character filter. Let's just call it that. And we'll have well, we know we have a name which is a string. We'll have the status which is a string, not a stop iteration a string. We can have a gender which is a string. What else did we have? Type and species. Okay, we'll leave out type and we have species and of course page which is an integer. Okay, so now we can construct our data class using these fields and it will give us proper notation. So let's remove this for now. We don't need this. Okay, let's have our search is going to be equal to our character filter. Let's add this in here. So let's put in name. So now we know that we can take in a name here. I think if I was to put in a number here it would complain at me. My Pyrite is not working properly in Vs code. I don't know. Normally it would complain and tell you that that's not a string but we'll do put a string in here. So we'll have rick and we'll have status. You can see again it's filling it out for us and we'll have dead. And now we can put in search. Is our as DICT on the search like this because we can't pass in a data class. But we're still going to have some problems. So let's run this now and we're getting back to our required positional arguments again. And that's because our data class at the moment is requiring all of these fields for when we were looking at F strings we said that that was bad and that is bad. But with data classes we can fix this and sort it out. So I'm going to do from typing, we're going to import in optional and this is going to allow us to make these fields, optional fields so they don't need to be included. Let's remove all of these like this so we can do optional. Now this is an optional string so this doesn't have to exist in this data class when we create it. So again, let's put that there, that one, that one there. And this one would be an integer. Okay. So now they're going to be optional. So this is going to work, right? Well, okay, we're still going to have some issues. No, we've still got issues. It's still saying they're required and that's because of the way that this is working together. So although this is optional, when we pass it in as a dictionary, let's try, it's still going to fail because we haven't specified a default for it. So what we want to do is we'll need to set a default and the default needs to be none. And that's because when it's none and the parameters are passed into request parameters as none, it will take them out of the query string and they won't exist. So now what we'll do is we'll just print out, print out our search and then we'll also print out the as DICT version of our search here so we can see as DICT search. Sorry that's not in the middle, that's in a bad place in the screen. There we go. So we can see these working and then we'll also just print out the end here. So now we can see this is our data class. You can see we have none specified for these because we didn't give it any information. Here's the dictionary and then here is the URL. Well this is the next page URL as I said earlier. And you can see that requests parameters has removed the none values from the dictionary. So we can go now and we can start to make searches against this endpoint using this data class. So we know, hey, these are the search fields. So if you're creating this API client for your API, for a consumer to use, they now know, hey, these are the search fields you can use. And it will come up when they actually do the make the Data class or whatever you're doing. So let's add in page just so we can see that this works. Let's put page two and run it again. And you can see now we have three pages, which I said before, and next page is three. Previous page is one. So I'd always recommend that if you're building out anything like this, that isn't just a quick and dirty script that you need to use, always use a data class and be aware that you can use optional and none as a default. Turn it into a dictionary and then pass it into search parameters. Pass it into parameters, into requests to make that query string super easy. It means we can use this function to search against this API endpoint whenever we need to. So, hopefully you guys have enjoyed this video. I'm going to do more API stuff with python, all this sort of stuff coming up. So if you like it, subscribe. Thanks you very much for watching. And if you want to know more about how I build API clients, you're going to want to watch this video next.