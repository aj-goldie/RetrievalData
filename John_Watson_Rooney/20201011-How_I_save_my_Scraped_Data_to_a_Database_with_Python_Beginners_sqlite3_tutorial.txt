 In this video I'm going to show you how you can save the output from your
 web scrapers to a database using Python. We're going to be using SQLite 3
 which is in the Python standard library so you don't need to install anything
 else and it's super simple. So let's get straight in. The first thing you want to
 do is import it so it's import SQLite 3 with one L. The next thing you want to do
 is you want to either connect to or create a database. So it's the same command.
 If there's no database exists with the name that you give it, it will create it.
 If it exists, it will connect to it. So it's C-O-N for connection. It's equal to
 SQLite 3. .connect and then the name of your database. So I'm going to call this one
 lunch.db for lack of anything more creative. The next thing that we want to do
 is we want to create a cursor object that lets us interact with the database
 using SQL commands. So it's a SQL database. So we want to do C. It's equal to
 con.cursor. This will let us use the C command to access our database and make
 changes to it or add things to it. So I'm going to save that and I'm going to just
 run that. See we've got no output but no errors. If I come over to the
 explorer, we can see right here there is a database called lunch.db. Ignore the other
 stuff in there. That's failed at attempts. So the next thing that we want to do is
 we need to create a table in our database. So that's done with a single command.
 There's a few different ways you can do it. I'm going to do it in the main script and
 I'm going to comment it out once we've created it. If you leave it in there and
 try and create the same table over and over again, you'll get an error. There's a
 couple of things we need to know about our table before we get going is we need to
 create the columns that we want and the data type that we're going to put
 into those columns. I'm going to stick to a simple three column database for
 now for this example and when I move on to the actual work more working example,
 you'll see it going through there. So I'm going to create my table with c.execute.
 c.execute.execute.execute commands on our database. We're going to do three
 apostrophes and then we do create table. Now all SQL commands are in capitals and
 now we need to name our table. So I'm just going to call this one meals and
 open up another set of brackets. Now this is where we're going to define our
 columns and our data types. So my first column is going to be sandwich and this
 is going to be a text column. The comma and then the next one we're going to do is
 fruit because we are healthy and again I'm going to do text and then I'm going to
 do table number and I'm going to make this an integer and then we close this
 off with apostrophes again and now I'm going to save and run that. I got an error
 because I have extra bracket in there which I do not want. So we run that. I've got
 no problems. So if I was to run this again, you'll see the error I get is this
 time it's table already exists. So we're going to comment that out. So now I'm
 going to get some data to store into our database. So I'm just going to quickly type
 up a sandwich and this can be whatever you want. Is it called to ham? Why not?
 Fruit? What's over one's favorite fruit? Yeah it's an apple definitely. And then
 table number can be let's go for 21. Why not? So you notice that these two are
 text fields and this is an integer because that is what we defined in our
 table when we created it. Sandwich was text, text, text, text, text and integer. So
 to insert this into our database, we again use c.execute through apostrophes and then
 we do insert into and now we do the table name which we would call meals and then
 we do values. So this is basically telling the code we want to insert into this
 table with these values. And then we open up our brackets and I'm going to use
 placeholders for this. So we do we've got three values. So I'm going to do three
 question marks. Now we can close that off and this is where we want to put in the
 information that we've saved that we've want to insert into our database. I did
 this in variables because it's kind of easier to understand because it's more
 likely that any data you want to put into your database is going to be in a
 variable like this. So if I saved this and run it, you would have thought that this
 would be inserted into our database. Well, this is just to actually make it stay in there.
 We have to commit it to the database. So if you think about you do a load of
 inserts, they're ready to go in and then you commit them. So you do con.commit.
 You can do multiple inserts with a single commit. If you wanted to, in fact,
 that's better. If you're inserting a lot of data in from various places or
 whatever, if you do all your inserts first and then you commit them at the
 end of the way, it saves you all the extra time of doing multiple commits to
 your database. So I'm going to run this and we're going to commit this data in.
 Let's run it once for now. I'm going to comment these two lines out now. And so
 now we've put that data in. If we want to get it back out, we want to select it
 from the database and we want to display it back to us. So to do that, we use our
 c.execute again because we're doing commands on a database and then we do select.
 Now star means everything. So we're basically getting everything from this table from.
 So now we've selected it much like when we insert, we have to commit. Now we've
 selected it, we have to fetch it. So we do c.federal. And we'll do actually
 save that as results is equal to and we'll print out the results. So if I've
 done everything right down here, we should have one result of ham, apple, and a
 table number. And we can see that this is an integer and these two are text fields.
 So I'm going to uncomment this and we'll add another bit of data and we'll go
 cheese, banana and they can sit on the same table number.
 If we run that, we can see that's inserted and we'll do a couple more.
 Let's do jam. When did you have a jam sandwich last orange and let's go and
 I can sit on table 22, put that in there, you can see that's coming up here and we'll do one more.
 I'm running out of what you have in a sandwich, chicken or not. This guy can also have an orange
 and also sit on table 22. Okay, so now we've got one, two, three, four entries into our database.
 So comment this out now and save that and we'll run it and we'll see that we have the entries here.
 So we could, you can do anything you could select, you could index or whatever or anything because
 this is just a list. What I'm going to do now is I'm actually going to show you how you can
 select different data. So I'm going to select instead of staff for everything, I'm actually going to
 only select the records that are the fruit part from it. So this is just going to tell us
 the fruit that came through and we could do the same with the table number,
 table number, I think I called it, table number. And we can see that we have them there.
 So that's a nice easy way to create the database, create a table, connect to it, insert
 then commit data and I've showed you how to select and fetch and then display.
 The other thing that is quite useful especially when you're testing is to delete a table from your
 database. So to do that, I'll do that up here, you do see dot execute and through apostrophes and it is
 drop table, I believe and then the table name meals. So this is basically going to drop everything,
 it's going to delete that whole table. So if I run it again, we're going to get no results.
 I did call it meals because I'm trying to select from a table that does not exist, so you can't do
 that. And again, if I come up that out, put this one back in to create the table again and we put
 these two back in to commit. We're going to run this and we're just having one entry back.
 So that's basically it. I want to show you how I would do that in my web scraper now,
 but these are the core commands that you're going to need to put data into a database and save it
 and then retrieve it. So now I'll show you a more real world working example. I've got here a
 simple web scraping script. I'm just going to make this one smaller so we can see everything a bit
 easier on the screen. And we're using request and beautiful soup and we are going out to this URL
 that we've given down here and we're bringing back some information. Now this specific information
 I've got, I'm getting the time. So I'm importing date time. I'm getting the time, I'm storing a
 store code and we're getting the title, the price and the stock status of the item on this page.
 So if I run this, you'll see what the output is. You can see here it's all just printed in a line.
 We have the date time which is the date and the time right down. This was the store code that I
 put in. The product was this AMD processor and the price for 75 and this is the stock status.
 And this is a long texturing at the moment which is not ideal but I don't know what I'll do.
 So if I wanted to save all of this information to a database so we could store it and we could
 maybe analyze it later. You could run this automatically every hour to find price information.
 To do that, I'm going to do exactly what I did before. We're going to import
 SQLite3. Let's close that and I'm going to do con for connection is equal to SQLite3.connect
 And let's call this CPUtest.db and then I'm going to do c is equal to con.cursa. So we have
 something we can interact with the database. Now I'm going to create the table. So we do again
 c.execute and we do create table and I'm going to call this one price prices. Prices will do.
 Now I've showed you this or I've showed you this. We have the date first so I want to do date
 which is a date object. We can do that in the database which is really cool. Then I'm going to do
 store which was a text field title which is also text. Let's move this on to another line so we can
 see and then I'm going to what was the next one price excuse me was I'm going to do real which is
 like a float which is a decimal point number and the last one was stock and that was also text.
 So we've got date store title price stock date store title price stock there we go. So we've got
 all the information there. So I'm going to go ahead and I'm going to comment out this so it doesn't
 actually run that. Let's shrink that down. We don't need that for the moment and run this. Get no errors.
 So hopefully we've created our table run it again. Yep table already exists. So we can
 comment this line out but because I'm happy with it like that I'm actually just going to go ahead
 and remove it. So what we need to do is we need to take the function that we've written
 and at the moment it just prints this information out but we want to insert it into our database
 instead. So I'm just going to leave that there now and I'm going to do c.execute and insert
 into and our table was called prices and then the values values and we've got a date store title
 price of stock we've got five so we need to do five two three four five one two three four five
 and then close that off and then in here we're going to do this. Now this is in has to be in the
 right order so it has to be in the order that we put the we created our table which this
 fortunately is so I don't have to type it out again. Let's remove our print statement for now as
 commented out. So what we've done so far is we've created our connection we created our database
 and created a connection we have our cursor objects and here we are executing and inserting
 these values into the database. So outside of the function because we met one around multiple
 functions I'll show you that in a second we want to do con dot commit and that's going to commit
 that information into the database. So I'm going to just do a quick print statement after this
 just so I know that it's complete it's a bit tidier run that no errors and complete. So to check that back
 I get we do c.execute select three of us fees select star from prices
 and like we did before where we insert and then commit when we select we need to fetch so c.fertural
 and I'm going to say again results because why change and then print results. And there's one thing
 I missed on my last explanation it's always always good to close your connection.
 con.close after you are done. So I'm going to run this again and we can see that we have
 two entries here this is our first one where we have the date, store the name,
 the price and the stock variable there. So I'm going to run that again we can see we're just adding to
 it and instead of filling that up with text I will print the length of the results because we can see
 that that is working. Run that again and we go five, six and so on. So every time it goes through
 this function and gets the data we insert into the database and then we commit it and then we
 select it back because we wanted to see it again we could select just the
 I click price and then print the actual results so these should be all of the prices that we've
 inserted they're probably all the same so just done it all together yet all the same but we could
 then see we could just pull out the prices for analysis or whatever. So this is a nice and
 the exact nice and easy example of one. Here's one more that I did earlier which basically is the same
 but the price is the same product but it's from three different stores. I'm going to
 just make this a bit smaller again just so for any example. So we've got three different stores where
 we select the same products and again I've got the execute insert values the same information.
 I have print c.lastrowID which is what I was using for testing which you can do which is quite handy
 and then I've put them all in a try and accept because I was having some problems running them.
 If you've done your if you've done your web scraping properly you probably won't need those.
 We commit it and down here I have a final command that I was using. So this is taking the data from
 the database and displaying it in a pandas data frame and we're basically doing the same select
 from and our connection we're just reading it in with breed SQL query into df. So if I run this
 now we'll see it's going to run through our functions and we can see that we actually have a
 nice data frame back that shows us some of the prices. And you can actually see here I know the data has
 been cut off a bit but the prices have changed so this one was yesterday I ran this yet the seventh
 nine o'clock-ish so you can see that ccl was 431 92 whereas today it's 455 62. What you could do is you
 could set this up to run every day or every 12 hours or so or even as often as you like and you can
 save all that data into a database. So I'm going to have coming up I'm going to have a new project where
 we're going to take this we're going to scrape every on an interval of I think I'll probably do it
 reasonably long just for the sake of it for this example but maybe we'll do it every 12 hours or so
 and then we'll take that data we're going to open it up in a flask app and we're going to create
 our own price tracker app that's going to come in the future you'll you guys will see that pop up and
 if you stuck around this file you'll know about it in advance if you have anyway. So that's going
 to do it for this video it's turned out a bit longer than I'd hoped hopefully it showed you that
 adding your scraped inflow to a database it is nice and easy and is accessible and you should
 definitely start doing it because databases obviously are the way forward because everyone uses them
 SQL is not hard to learn these are really basic commands there's so many more than this and
 there's so obviously it expands out but hopefully this you found this useful so thanks for sticking
 watching this video guys and I will see you next time. Thank you, bye.
