 Hydantic is a great library to put into your existing code to better handle and manage your data when you're working in Python So I've got this code on my screen here And what we're going to do is we're going to take this and we're going to add our Pidantic models to it Now the thing with this data is that it gets an awful lot of data This is a large JSON file and we just simply aren't going to be interested in all of it So what we can do is we can create a couple of Pidantic models to actually load that data into so we can choose by naming the fields correctly What information we want and we can basically just discard the rest? This is much easier and much more Needed and reusable that actually trying to index the different fields or using the get on the dictionary for example Okay, so let's just have a look at the data that has come back from this So this is a Shopify store so we have all of this JSON information like different product variants And think all of this sort of stuff which is just not going to be relevant to us in this case So we're going to pick just some information and we're going to grab that instead So let's come out of here and we're going to come into our code and we're going to add import in Pidantic so do from Pidantic we're going to import in base model for now We'll just start with this because of course we can do validation so we will add that in afterwards For each one of these products in our data that we're getting there is this variant piece information here This comes under the variants you can see that here. So this is going to be part of our nested Models that are going to be linked together So this has all this different information. We're just going to grab a few different bits So the first one that I want to create is actually going to be called variants So let's go ahead and have a new class. Let's put it here. We'll call this class variant And it will be part of our base model Like this Now we can say what information we want Let's just grab the title which was a string and then it's also grabbed the skew which was a string and also the price Which was also a string now it's important to note that these fields here that I've got here Actually match these ones because then pedantic is going to put that information in there correctly So I've got title skew and price right here. There we go. So let's go ahead and Add in our next model which is going to be product. Let's have class product and again base model And we'll have the ID of the product which will be an integer We'll have the let's go back up and find the actual product information. Here we go. We'll have the title And that'll probably do for us in that case. Let's go So we'll have title which is going to be a string and I think then that will do so now we just need our variants Because a variant can a product can have multiple variants. So this needs to be a list of variant like this So this is basically our models constructed. So what this one means here this product is that it's going to grab the ID in the title And then it's going to populate it with these variants now when we actually add the data into these models It means that we can then have access to the dot notation to get it and we can also export it as diction As a dictionary if we wanted to if we wanted to move this data on and we can even do validation as I said Which we will do in a minute So let's come back down to here where our products our main product our main function is and we're just printing the product out What we're going to do is we're going to say instead we're going to load it in so we'll have our item is equal to a instance of our product class and then we're going to unpack the products that we've got from each One because we're looping through each product in that JSON list like this Then let's just print out the item now And see what we get back Save that's come to my terminal. Let's clear this and we'll go by from three main.py And there we have our actual export of my pedantic model that we've created and you can see we have the ID The title and then a list of variants which matches our variants list here that has the title skew and the price Now this is pretty handy and it's actually very useful when you're dealing with large JSON data that you might be requesting from an API or something like that because what we can do now is if suddenly you think well actually I need some more information I want something else in here. I think it's grams. We can add that in. I think it might be Think it might be an integer. Let's find out and we can now go ahead and do our Python 3 main again And now we have the actual grams weight of that product as well So you can see how you can then just go through and add the information in that you need when you're wanting to get more And I've just dumped the rest of it. I just don't need it in this instance What we can also do is if we were to If this was part of our application or maybe we needed to do something this with this data We can then do I believe it's as Dict like this not as dict It's just dot dict like this And if we now run again We're gonna get the dictionary out which we can then of course Use as Jason within Python so we could send this to an endpoint in our application or Whatever we wanted to do with it. It's all there. So this is really useful So let's go ahead and just check out the actual validation that we can use as well I find this is particularly useful when you're dealing with data that you're getting into your application somehow or somewhere So you can actually validate and spit it back out if it doesn't fit what you need So we need to go ahead and import in validator as well. I'm going to validate on the variant class here So we'll do At validator and we need to tell it which field we want to validate on So I'm just going to validate on the skew field here and now we can have a function which is going to check the Data in the skew. So let's say check skew length and then we pass in This is the class and the value And now we can have let's just Required let's make a variable for this. I actually know how long these skews are required length is say 10 So let's do if Len of our value Does not equal the required length We can then raise our raisin error in this case will raise a value error Saying a skew must be 10 characters Long like this then will do Otherwise we're going to just return value like so. So let's save and I believe these ones are 10 So we'll run so we get no errors But if we were to change this required length say we only want interested in skews that are 12 characters long What we're going to find in this case because we have put in the Value error is just going to go ahead and it's going to fail straight away Because I hate these don't fit in so we now have a way of capturing that before it gets further into our system and causes an actual error Somewhere so if you haven't started using by dantique or even data classes or something like that in your code I think you can see from this that you really should start to put these in regardless Even if you're not building a web application or an API if you're just handling data in some way Using pedantic to manage it or data classes something like that is going to improve your developer experience and the readability and the actual Robustness of your code by a lot. So if you've enjoyed this video and you want to know more about actually getting the data like I did here You're going to want to watch this video next
