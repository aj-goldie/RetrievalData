 So if you do any kind of sales reports or any reporting in Excel that involves doing the same thing over and over again,
 this video is really going to help you out.
 So what we're going to do is we're going to use pandas to actually take a few sales files,
 combine them and give us some results at the end.
 So I'm going to import pandas at the top of my file as PD.
 And we're also going to use Numpy.
 So we're going to do import at Numpy as MP.
 These are standards.
 I definitely recommend sticking to them.
 We're also going to use glob because glob is going to let us get all of the files within our directory.
 So inside my project file, I have three separate sales files.
 I just open up.
 You'll see we have order ID, date, email, and we have country, item and quantity.
 Now all of these files are the same.
 I'm going to assume that if you're working with a, can we all work computer system,
 your exports will always be the same.
 So this should apply.
 What we want to do first is actually open up all of the files using globs.
 So files is equal to glob.glob.
 And we're sticking within our main folder here.
 So we don't need to give a path.
 I'm just going to do star dot CSV.
 So we only get the CSV files.
 So if I print out files now, we should get our files here.
 There you go.
 So we have house now.
 We have a nice list of all the CSV files that are in this folder.
 So what we're going to do is we're going to create a data frame for each file
 that's going to be in our directory.
 And then we're going to concatenate them all together at the end.
 You don't want to append a data frame to a data frame to a data frame.
 It will cause you memory issues.
 So what I'm going to say is we can have our df list to start with, which we're going
 to append all of our data frames to do for f in files.
 And I'll just call it our CSV is equal to PD dot read CSV.
 You can also do read Excel if you need to, if you're using Excel files.
 And we're going to give it our f.
 Then we want to do our df list dot append the CSV file.
 Once we've done that, we'll have a list of data frames.
 And we can then say, oh, let's put sales is equal to PD dot concats.
 So we can concatenate them all together from our df list like this.
 So now if I go ahead and print out our sales data frame, we should get some
 information back here.
 There we go.
 You can see it 3000 rows.
 That's because each of my files has 8000 lines in.
 And now if you've ever had to open up large Excel files, copy a load of stuff
 out to try and make one big one.
 You'll know how difficult that is.
 And this is just an exact the same thing instantly brilliant.
 So what we're going to do now is we're going to talk about column types.
 I'm going to do dot d types.
 So this is important because what we want to know is the actual data type of
 each of the information that's in the columns of our data frame.
 Now you can see that it's correctly identified.
 Our order ID is a number and also the quantity.
 However, and although we're not going to use it so much in this example,
 the date is an object and not a date time.
 So what we're going to do is I'll leave this D types print in here,
 but we're going to go ahead and say that we want to change that to a date time
 object.
 Now to do this, you call the name of the data frame, which is sales,
 and then reference the column name.
 So this is important.
 This is the column name in my code.
 It's called date.
 You just need to make sure that whatever you put in here is the actual name
 of the column.
 Say that is equal to and I'm going to do PD dot to date time.
 So we're using pandas dot to date time and we're going to give it the exact same
 thing that we're just talking about the date.
 So what we're saying here is that we're going to use PD dot date time on
 this column to change it to a date time.
 And then we're going to make our version of it equal to what comes out.
 So now if I copy this and run it,
 you'll see the second time round we have the date time object there as opposed
 to just this pipeline objects here.
 So we've successfully converted our column into the actual format that we
 wanted to be the data type.
 Let's move that up there.
 So now we want to work out what we actually want to do with this data.
 And I'm going to suggest that probably one of the most common things is to
 create a pivot table to show and summarize the data.
 So you can pass that on to whoever you need to.
 So to do that, it's nice and simple.
 I'm going to say let's have a new data frame.
 We're going to call it total sales, if I can type.
 Thank you.
 And we want to use PD dot pivot table.
 There we go.
 Now, the first thing that we need to put into here is the actual original data
 frame that we created, which we called sales.
 Then we need an index.
 So this is going to be the sort of the left hand side of our date of our
 pivot table.
 And that's going to be the item column.
 Again, this needs to match the actual column name.
 And then we want some value.
 So we're going to say our quantity.
 So this is going to give us the items on the left and then the total quantity
 on the right.
 But to get the total quantity, we need to give it our function.
 So we say, egg funk is equal to MP dot sum.
 And that's why we've used MP up here, numpy.
 So let's go ahead and print out total sales.
 And we'll run that.
 There we go.
 So you can see we now have our item and then the total number of each one
 summarized from all three of those files into a quick and easy data frame, which
 we can then crucially export out to another CSV.
 So we got no messing around.
 We can just take all that data.
 Here's the summary, send it off, move on.
 Now, you notice that my numbers are all very similar.
 And that's just the way that this fake data has been generated.
 Now, if we wanted to summarize this by country as well, I'm going to copy the
 row with control D in PyCharm and we'll do sales by country.
 And to make it have multiple indexes, we just simply turn our index into a list.
 So I'm going to go item and also country.
 We're going to leave the rest of the same because we want to know the total
 quantity, just like we did before, but we wanted to see it by country as well.
 So let's run that.
 There we go.
 So now we can see that we have by country separated out.
 You can see the numbers are slightly different here.
 So once you've figured out what your pivot tables do you want them to look like
 and you've messed around with your data enough, you've changed your dates around
 or whatever you need to do to sit to save these to a new CSV file.
 All you have to do is call the name and then do dot to CSV or you can do dot to
 Excel if you like and give it a name.
 And then the same control D again, sales by country, sales by country.
 So I'm going to run that and we'll have two new files in our folder with exactly
 what we just had there that we can then create that we've just created.
 So there's our item quantity one and here's our sales by country one that we
 could easily now just fall down to whoever we need to or do whatever we want
 to do with that data.
 So as I said, if you do anything repetitive and excel, I definitely recommend
 learning how to do it in pandas.
 It will save you tons of time in the future.
 If you've enjoyed this video, I think you're going to like this one as well.
 [BLANK_AUDIO]
